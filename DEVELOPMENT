DEVELOPMENT
===========

Notes for developing, extending, and testing STOQS

You should already have completed the tasks described in PREREQUISITES and INSTALL.

STOQS is meant to be customizable and easy to extend to handle data, perform queries,
and deliver products that suit several particular needs.  A knowledge of Python, and
the supporting Django, PyDAP, Numpy libraries is needed to take full advantage of these
capabilities; but with the agile methodology described here you should feel confident
in making changes that you 'think might work'.


1. Directory structure overview:
    
    stoqshg/
        loaders/        - Data load scripts and class files (e.g. DAPloaders.py) for
                          for loading data into STOQS from various sources
        stoqs/          - Contains STOQS data model and other python support code
            fixtures/   - JSON formatted database data used for tests
            static/     - Directory of web sever static files: javascript, images, etc.
            templates/  - HTML templates and javasctipt used by views
            views/      - Contains Python code to render data in web responses
        urls.py         - The routing of the urls
        utils/          - Directory of utility modules
        
    Development of STOQS will occurs in the loaders, templates, views, and utils directories.
    There may be times when models.py in stoqs/ will be modified, but this must be
    done carefully as it needs to be coordinated with schema evolution of any existing
    stoqs databases.  During development it's often easiest to drop existing databases, then
    reload the data with the appropriate script from loaders.
        

2. Edit, compile, deploy, test process:

    First, start your development Django and Celery servers (in separate windows):
   
        python manage.py runserver 0.0.0.0:8000
        python manage.py celeryd -l INFO    

    (The celeryd daemon is used to manage long running tasks, such as deleting an activity
    from the database.)
    
    Second, save a change to code in the view package.  The change is immediately compiled
    and deployed by the running Django development server.  There is no need to restart anything.
    (Note: in a production environment with Apache WSGI, the httpd server does need to be
    restarted in order to deploy the changed code.)
   
    Third, run the Django unit tests
      NOTE: Django patch #16778 must be installed (if using Django 1.3) and template_postgis
            must exist on your server.

            export LD_LIBRARY_PATH=/usr/local/lib/  # Needed if packages, such as gdal, were installed here 
            python manage.py test stoqs -v 2

    Note: The user that executes manage.py must have priveleges to create and drop database
    for Django to run the tests.  You may need to do this at psql for your shell account
    and the stoqsdm account:

        CREATE ROLE <user_name> LOGIN PASSWORD 'password_of_your_choice';
        ALTER ROLE <user_name> CREATEDB NOSUPERUSER NOCREATEROLE;

    You must also be able to create a new database using the postgis template that was installed
    with yum.  Postgres needs to be told that it is a template for other's than the owner to 
    copy it.  Update to make it a template with this psql command:

        UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template_postgis';

    Other database roles need to have permission to see the relations (tables) in template_postgis,
    so you need to do this too; for sure, run these commands as well with stoqsadm for <user_name>:

        \c template_postgis
        GRANT ALL ON TABLE geometry_columns TO <user_name>
        GRANT ALL ON TABLE spatial_ref_sys TO <user_name>
    
    If they all pass you are good.  If you get a failure, fix it and then repeat the test.
    Iterate on these last two steps.  You may also test the links from the activities and
    mgmt views.  If there is missing coverage for a needed test please add it to stoqs/tests.
   
   
3. Additional notes:
    
    - Need to use Django 2.4.1 because of existing conflict between psycopg and Django
    - For tests to work you must apply patch at:
        https://code.djangoproject.com/ticket/16778 to adapter.py which is applied to file:
        venv-stoqs/lib/python2.6/site-packages/Django-1.3-py2.6.egg/django/contrib/gis/db/backends/postgis/adapter.py
  
    - The data from the database loaded by the DAPloaders test may be dumped into a JSON file 
      which is used as a fixture for the unit tests.  This normally needs to be done after 
      and schema changes:

        python manage.py dumpdata --database=default stoqs > stoqs/fixtures/stoqs_test_data.json
        
    - There is no unit test for the code in loaders.  The loaders code manually selects the database
      using Django's 'using=<dbalias>' technique.  Django's test runner uses the automated database 
      routing framework as implemented in stoqs/db_router.py and the <dbName> pattern in urls.py.

    - Model changes (adding new relations, etc.) may require starting over with creating and syncing
      a database then loading some data, creating a new fixture, and testing.

    - If new python modules are added with pip update the requirements.txt file with:

        pip freeze > requirements.txt

      and commit the requiremetns.txt file to the repository.
    
    - Additional information is in the file DEBUG_OPTIMIZE      

--
Mike McCann
MBARI 4 June 2012

