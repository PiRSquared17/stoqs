DEVELOPMENT
===========

Notes for developing, extending, and testing STOQS

You should already have completed the tasks described in PREREQUISITES and INSTALL.

STOQS is meant to be customizable and easy to extend to handle data, perform queries,
and deliver products that suit several particular needs.  A knowledge of Python, and
the supporting Django, PyDAP, Numpy libraries is needed to take full advantage of these
capabilities; but with the agile methodology described here you should feel confident
in making changes that you 'think might work'.


1. Directory structure overview:
	
	stoqshg/
		loaders/		- Data load scripts and class files (e.g. DAPloaders.py) for
					  	  for loading data into STOQS from various sources
		stoqs/			- Contains STOQS data model and other python support code
			fixtures/ 	- JSON formatted database data used for tests
		    static/	    - Directory of web sever static files: javascript, images, etc.
			templates/	- HTML templates and javasctipt used by views
			views/		- Contains Python code to render data in web responses
		urls.py			- The routing of the urls
        utils/          - Directory of utility modules
		
	Development of STOQS will occurs in the loaders, templates, views, and utils directories.
	There may be times when models.py in stoqs/ will be modified, but this must be
	done carefully as it needs to be coordinated with schema evolution of any existing
	stoqs databases.  During development it's often easiest to drop existing databases, then
    reload the data with the appropriate script from loaders.
		

2. Edit, compile, deploy, test process:

   	First, start your development Django and Celery servers (in separate windows):
   
   		python manage.py runserver 0.0.0.0:8000
   		python manage.py celeryd -l INFO    

    (The celeryd daemon is used to manage long running tasks, such as deleting an activity
    from the database.)
   	
   	Second, save a change to code in the view package.  The change is immediately compiled
   	and deployed by the running Django development server.  There is no need to restart anything.
   	(Note: in a production environment with Apache WSGI, the httpd server does need to be
   	restarted in order to deploy the changed code.)
   
   	Third, run the Django unit tests
	  NOTE: Django patch #16778 must be installed (if using Django 1.3) and the DATABASE_USER 
		specified in privateSettings must have root priveledges in the postgresql database.
   
    		python manage.py test stoqs -v 2
    
   	If they all pass you are good.  If you get a failure, fix it and then repeat the test.
   	Iterate on these last two steps.  You may also test the links from the activities and
   	mgmt views.  If there is missing coverage for a needed test please add it to stoqs/tests.
   
   
3. Additional notes:
	
	- Need to use Django 2.4.1 because of existing conflict between psycopg and Django
	- For tests to work you must apply patch at:
	  	https://code.djangoproject.com/ticket/16778 to adapter.py which is applied to file:
	  	venv-stoqs/lib/python2.6/site-packages/Django-1.3-py2.6.egg/django/contrib/gis/db/backends/postgis/adapter.py
  
	- The data from the database loaded by the DAPloaders test may be dumped into a JSON file 
	  which is used as a fixture for the unit tests:

		python manage.py dumpdata --database=default stoqs > stoqs/fixtures/stoqs_test_data.json
		
	- There is no unit test for the code in loaders.  The loaders code manually selects the database
	  using Django's 'using=<dbalias>' technique.  Django's test runner uses the automated database 
	  routing framework as implemented in stoqs/db_router.py and the <dbName> pattern in urls.py.

	- Model changes (adding new relations, etc.) may require starting over with creating and syncing
	  a database then loading some data, creating a new fixture, and testing.
	
	  

--
Mike McCann
MBARI 5 January 2012

