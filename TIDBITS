
TIDBITS
=======

The tidbits here are anything that might be useful for developing, working with,
or using stoqs.

Here's an interactive python session that retrieves measurements and plots a histogram:
---------------------------------------------------------------------------------------

cd ~/dev/stoqshg
./manage.py shell

from stoqs import models as m
import matplotlib.pyplot as plt

# Read from stride=100 database
data = m.MeasuredParameter.objects.using('stoqs_april2011_s100').filter(parameter__name='salinity')
sal = [float(mp.datavalue) for mp in data]
plt.hist(sal,100)
plt.title('Histogram of salinity from stoqs_april2011_s100')
plt.xlabel('Salinity')
plt.ylabel('Count')
plt.savefig('sal_hist_s100.png')

# Repeat for full-resolution database
plt.clf()
data = m.MeasuredParameter.objects.using('stoqs_april2011').filter(parameter__name='salinity')
sal = [float(mp.datavalue) for mp in data]
plt.hist(sal,100)
plt.title('Histogram of salinity from stoqs_april2011')
plt.xlabel('Salinity')
plt.ylabel('Count')
plt.savefig('sal_hist.png')


Here's a little script to update the start and end dates for all the Campaigns on a server:
-----------------------------------------------------------------------------------------

cd ~/dev/stoqshg
./manage.py shell

from stoqs import models as m
from django.db.models import Max, Min

dbAliases = [   'stoqs_may2012', 'stoqs_october2010_s100', 'stoqs_september2010_s100', 'stoqs_september2010_s100',
                'default', 'stoqs_june2011_s100', 'stoqs_september2010', 'stoqs_april2011_s100', 
                'stoqs_may2012_s100', 'stoqs_april2011', 'stoqs_june2011']
for dbAlias in dbAliases:
    ip_qs = m.InstantPoint.objects.using(dbAlias).aggregate(Max('timevalue'), Min('timevalue'))
    m.Campaign.objects.using(dbAlias).update(startdate = ip_qs['timevalue__min'], enddate = ip_qs['timevalue__max'])


Manually managing schema evolution: adding a geometry column to the Activity table to an existing database:
-----------------------------------------------------------------------------------------------------------
(Extracted from './manage.py sqlall stoqs')
\c <database>
SELECT AddGeometryColumn('stoqs_activity', 'mappoint', 4326, 'POINT', 2);
CREATE INDEX "stoqs_activity_mappoint_id" ON "stoqs_activity" USING GIST ( "mappoint" GIST_GEOMETRY_OPS );


Drop NOT NULL constraint on foreign key where we don't always have an Analysis Method:
--------------------------------------------------------------------------------------
ALTER TABLE stoqs_sampledparameter ALTER COLUMN analysismethod_id DROP NOT NULL;


Examples of adding columns to accomodate a new schema:
------------------------------------------------------
ALTER TABLE stoqs_parametergroup ADD COLUMN "description" varchar(128);
ALTER TABLE stoqs_measurement ADD COLUMN "nominallocation_id" integer REFERENCES "stoqs_nominallocation" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE stoqs_nominallocation ADD COLUMN "activity_id" integer REFERENCES "stoqs_activity" ("id") DEFERRABLE INITIALLY DEFERRED;


Change database password:
-------------------------
ALTER ROLE stoqsadm login password 'newpassword';


Add an 'everyone' Postgres user with read access to all databases - useful for read-only web apps
-------------------------------------------------------------------------------------------------
CREATE ROLE everyone login password 'guest';
\c <database>
GRANT select on all tables in schema public to everyone;

Delete an Activity:
-------------------
./manage.py shell
acts = models.Activity.objects.using('stoqs_march2013_s').filter(name__contains='plm04')
for a in acts:
    a.delete(using='stoqs_march2013_s')


Create a movie of Chlorophyll to bb470 from Tethys from september 2013 database (http://tinyurl.com/krfrd3b)
------------------------------------------------------------------------------------------------------------
./manage.py shell_plus

import matplotlib.pyplot as plt
from django.db import connections
from datetime import datetime, timedelta
from stoqs.models import Activity

# SQL template copied from STOQS UI Parameter-Parameter -> sql tab
sql_template = '''SELECT DISTINCT stoqs_measurement.depth,
                mp_x.datavalue AS x,
                mp_y.datavalue AS y
FROM stoqs_activity
INNER JOIN stoqs_platform ON stoqs_platform.id = stoqs_activity.platform_id
INNER JOIN stoqs_instantpoint ON stoqs_instantpoint.activity_id = stoqs_activity.id
INNER JOIN stoqs_measurement ON stoqs_measurement.instantpoint_id = stoqs_instantpoint.id
INNER JOIN stoqs_measurement m_y ON m_y.instantpoint_id = stoqs_instantpoint.id
INNER JOIN stoqs_measuredparameter mp_y ON mp_y.measurement_id = m_y.id
INNER JOIN stoqs_parameter p_y ON mp_y.parameter_id = p_y.id
INNER JOIN stoqs_measurement m_x ON m_x.instantpoint_id = stoqs_instantpoint.id
INNER JOIN stoqs_measuredparameter mp_x ON mp_x.measurement_id = m_x.id
INNER JOIN stoqs_parameter p_x ON mp_x.parameter_id = p_x.id
WHERE (p_y.name = 'chlorophyll')
  AND (p_x.name = 'bb470')
  AND (stoqs_instantpoint.timevalue >= '{start}'
       AND stoqs_instantpoint.timevalue <= '{end}')
       AND stoqs_platform.name IN ('tethys') '''

# Get connection to database using dbAlias defined in privateSettings
dbAlias = 'stoqs_september2013_t'
cursor = connections[dbAlias].cursor()

# Get start and end datetimes for the activity
aName = 'Tethys_CANON_Fall2013'
aStart = Activity.objects.using(dbAlias).filter(name__contains=aName).values_list('startdate')[0][0]
aEnd = Activity.objects.using(dbAlias).filter(name__contains=aName).values_list('enddate')[0][0]

# Pull out data and plot at timeInterval intervals
timeInterval = timedelta(hours=6)
startTime = aStart
endTime = aStart
endTime += timeInterval
while endTime < aEnd:
    endTime = startTime + timeInterval
    sql = sql_template.format(start=startTime, end=endTime)
    print 'Executing sql = ', sql
    cursor.execute(sql.format(start=startTime, end=endTime))
    x = []
    y = []
    for row in cursor:
        x.append(row[1])
        y.append(row[2])

    fig = plt.figure()
    plt.grid(True)
    ax = fig.add_subplot(111)
    ax.set_xlim(0.0, 0.006)
    ax.set_ylim(0.0, 6.0)
    ax.set_xlabel('bb470 (m^{-1})')
    ax.set_ylabel('chlorophyll (mg m-3)')
    ax.scatter(x, y, marker='.', s=10, c='k', lw = 0, clip_on=False)
    fig.savefig('chl_bb470_' + startTime.isoformat() + '.png')
    plt.close()

    startTime = endTime





Perform speacialized Parameter-Parameter query:
-----------------------------------------------
# Use STOQS UI to get SQL for your Parameter-Parameter query (on the sql tab)
# e.g.:
In [1]: sql='''SELECT DISTINCT stoqs_measurement.depth,
   ...:                 mp_x.datavalue AS x,
   ...:                 mp_y.datavalue AS y
   ...: FROM stoqs_activity
   ...: INNER JOIN stoqs_platform ON stoqs_platform.id = stoqs_activity.platform_id
   ...: INNER JOIN stoqs_instantpoint ON stoqs_instantpoint.activity_id = stoqs_activity.id
   ...: INNER JOIN stoqs_measurement ON stoqs_measurement.instantpoint_id = stoqs_instantpoint.id
   ...: INNER JOIN stoqs_measurement m_y ON m_y.instantpoint_id = stoqs_instantpoint.id
   ...: INNER JOIN stoqs_measuredparameter mp_y ON mp_y.measurement_id = m_y.id
   ...: INNER JOIN stoqs_parameter p_y ON mp_y.parameter_id = p_y.id
   ...: INNER JOIN stoqs_measurement m_x ON m_x.instantpoint_id = stoqs_instantpoint.id
   ...: INNER JOIN stoqs_measuredparameter mp_x ON mp_x.measurement_id = m_x.id
   ...: INNER JOIN stoqs_parameter p_x ON mp_x.parameter_id = p_x.id
   ...: WHERE (p_y.id = 24)
   ...:   AND (p_x.id = 26)
   ...:   AND (stoqs_instantpoint.timevalue >= '2013-09-19 10:04:24'
   ...:        AND stoqs_measurement.depth >= -2.28
   ...:        AND stoqs_instantpoint.timevalue <= '2013-09-20 03:24:20'
   ...:        AND stoqs_platform.name IN ('AUV_Dorado')
   ...:        AND stoqs_measurement.depth <= 84.21)'''

# Perform the query
from django.db import connections
cursor = connections['stoqs_september2013_t'].cursor()
cursor.execute(sql)
for row in cursor:
    print(row)


--
Mike McCann
MBARI 20 March 2013

