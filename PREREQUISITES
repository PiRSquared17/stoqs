# PREREQUISITES 
# =============

# These commands need to be executed once on your system, they have been tested on CentOS 6.
# It is assumed that Postgres 9.1 is already installed.  If you do not have PostgreSQL 9.1
# installed, then follow the directions here: http://wiki.postgresql.org/wiki/YUM_Installation
#
# Some level of familiarity with Unix is required to install STOQS.  
# If you run into any difficulties please feel free to post questions on the stoqs-discuss 
# mail list, which you may join at: # https://groups.google.com/forum/#!forum/stoqs-discuss

su -c "easy_install virtualenv"
su -c "yum -y install rabbitmq-server scipy mod_wsgi"

# Rabbitmq is used by the web app t manage long-running tasks
su -c "/sbin/chkconfig rabbitmq-server on"
su -c "/sbin/service rabbitmq-server start"
su -c "rabbitmqctl add_user stoqs stoqs"        # Note: You may want different credentials
su -c "rabbitmqctl add_vhost stoqs"             # for the Rabbitmq account - here we use 'stoqs'.
su -c 'rabbitmqctl set_permissions -p stoqs stoqs ".*" ".*" ".*"'

# For ability to generate ER diagrams using ./manage.py graph_models stoqs stoqs -g -o stoqs_model.png
su -c "yum -y install graphviz-devel"
su -c "yum -y install graphviz-python"

# A useful package for manipulating images
su -c "yum -y install ImageMagick"

# Become root and su to user postgres in order to have permissions create the postgis template database
su
su postgres

# Create the postgis template  database (Note: depending on versions, your paths may vary)
su -c "yum -y install postgis91"		        # The actual package name may vary
createdb postgis
createlang plpgsql postgis
psql -d postgis -f /usr/pgsql-9.1/share/contrib/postgis-1.5/postgis.sql
psql -d postgis -f /usr/pgsql-9.1/share/contrib/postgis-1.5/spatial_ref_sys.sql

# Make sure "timezone = 'GMT'" is specified in file /var/lib/pgsql/9.1/data/postgresql.conf and reload

# For ability for persistant storage of GIFS, assuming default location of your web server is /var/www/html
mkdir /tmp/media
su -c 'ln -s /tmp/media /var/www/html/media'

# Build GDAL from source.  Download latest (v1.9 or higher) tar ball from http://download.osgeo.org/gdal/
# Unpack, and in the top level directory (e.g. gdal-1.9.0/) run ('make install' must be done as root):
su -c "yum -y install gdal expat-devel"              # Required for csv files and KML parsing support
./configure --with-python
make
make install

# Mapserver - these instructions have been tested for version 6.2.1:
# ------------------------------------------------------------------
# To build MapServer some prerequisites will need to be installed:
su -c "yum -y install freetype-devel libpng-devel giflib-devel libjpeg-devel gd-devel proj-devel"
su -c "yum -y install proj-nad proj-epsg curl-devel libxml2-devel postgresql91-devel libxslt-devel pam-devel openssl-devel readline-devel"

# Install MapServer following the instructions for your system at http://mapserver.org/.  It is typical to
# build it from source and then copy the 'mapserv' executable to the cgi-bin directory for your web server.
# The .map templates assume that this is where the mapserv executable is located.  You will set the MapServer
# host name (MAPSERVER_HOST) for your privateSettings file.  It _can_ be a separate server from your Django 
# server, but it must be able to see the .map files produced by Django through a network mount or some other 
# mechanism.

# Make sure the file at /usr/share/proj/epsg contains a line starting with <900913>; if not, append the following lines:

# Spherical Mercator
<900913> +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs <>

# With the above prerequisites, mapserver configure can be run as follows:
./configure --with-proj=/usr --with-ogr=/usr/local/bin/gdal-config --with-gdal=/usr/local/bin/gdal-config --with-wfs --with-wfsclient --with-wmsclient --with-postgis=/usr/pgsql-9.1/bin/pg_config
# Make sure that there is a libpg.so file or symlink in /usr/pgsql-9.1/lib.  You may need to do this:
su -c "ln -s /usr/pgsql-9.1/lib/libpq.so.5.4 /usr/pgsql-9.1/lib/libpq.so
make 
make install


# Make sure that the apache httpd service is running on your system
chkconfig httpd on
/sbin/service httpd start

# The following prerequisites must be installed for each development directory on the system for which the 
# above system-level prerequisites have been installed.

# Go to the directory where you have checked out the stoqs project, e.g.:

cd ~/dev/stoqshg

# Instructions below are for setting up a development or "sandbox" environment.  If you are running 
# in a production environment where you have system admin support then it's likely that all of 
# these Python libraries have been installed at the system level and you will not need to create
# the venv-stoqs virtual environment with these packages, though you may find it convenient to run
# the virtual environment regargless.
 
# Create a venv for a development environment
virtualenv venv-stoqs
source venv-stoqs/bin/activate      # source venv-stoqs/bin/activate.csh if using csh or tcsh


# Install additional Python packages required by STOQS. (Make sure you are in your venv
# - your prompt should look something like "(venv-stoqs)[student@localhost stoqshg]$ "):
./setup.sh

# This will take a few minutes to install everything that is specified in requirements.txt

# When running django-admin.py or 'python manage.py' do it in your virtualenv, making
# sure your prompt looks something like "(venv-stoqs)[student@localhost stoqshg]$ "

# Proceed to the instructions in the INSTALL file.

--
Mike McCann
MBARI 17 July 2013


